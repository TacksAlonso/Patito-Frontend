{"ast":null,"code":"import axios from 'axios';\nconst apiUserServices = axios.create({\n  baseURL: 'http://localhost:8181/v1/users'\n});\nconst apiInventary = axios.create({\n  baseURL: 'http://localhost:8383/v1'\n});\nconst apiOrders = axios.create({\n  baseURL: 'http://localhost:8484/v1'\n});\n\n// Función para obtener el token de localStorage\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Configura el interceptor para incluir el token en los encabezados\napiUserServices.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\napiInventary.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\napiOrders.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport { apiUserServices, apiInventary, apiOrders };","map":{"version":3,"names":["axios","apiUserServices","create","baseURL","apiInventary","apiOrders","getToken","localStorage","getItem","interceptors","request","use","config","token","headers","Authorization"],"sources":["A:/Code repositorio/Java/Patito/front-end/patito-frontend/src/apiCalls/apiCalls.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst apiUserServices = axios.create({\r\n  baseURL: 'http://localhost:8181/v1/users',\r\n});\r\n\r\nconst apiInventary = axios.create({\r\n  baseURL: 'http://localhost:8383/v1',\r\n});\r\n\r\nconst apiOrders = axios.create({\r\n  baseURL: 'http://localhost:8484/v1',\r\n});\r\n\r\n// Función para obtener el token de localStorage\r\nconst getToken = () => {\r\n  return localStorage.getItem('token');\r\n};\r\n\r\n// Configura el interceptor para incluir el token en los encabezados\r\napiUserServices.interceptors.request.use((config) => {\r\n  const token = getToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\napiInventary.interceptors.request.use((config) => {\r\n  const token = getToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\napiOrders.interceptors.request.use((config) => {\r\n  const token = getToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport { apiUserServices, apiInventary, apiOrders };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAM,CAAC;EACnCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAGJ,KAAK,CAACE,MAAM,CAAC;EAChCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAME,SAAS,GAAGL,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA,MAAMG,QAAQ,GAAGA,CAAA,KAAM;EACrB,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACtC,CAAC;;AAED;AACAP,eAAe,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACnD,MAAMC,KAAK,GAAGP,QAAQ,CAAC,CAAC;EACxB,IAAIO,KAAK,EAAE;IACTD,MAAM,CAACE,OAAO,CAACC,aAAa,GAAG,UAAUF,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEFR,YAAY,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAChD,MAAMC,KAAK,GAAGP,QAAQ,CAAC,CAAC;EACxB,IAAIO,KAAK,EAAE;IACTD,MAAM,CAACE,OAAO,CAACC,aAAa,GAAG,UAAUF,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEFP,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAC7C,MAAMC,KAAK,GAAGP,QAAQ,CAAC,CAAC;EACxB,IAAIO,KAAK,EAAE;IACTD,MAAM,CAACE,OAAO,CAACC,aAAa,GAAG,UAAUF,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,SAASX,eAAe,EAAEG,YAAY,EAAEC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}