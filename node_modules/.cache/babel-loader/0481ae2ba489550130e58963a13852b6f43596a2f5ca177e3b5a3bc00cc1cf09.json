{"ast":null,"code":"var _s = $RefreshSig$();\n// src/features/orders/ordersSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { Orders } from \"../../cons/urls\";\nimport { selectToken } from '../auth/authSlice'; // Selector para obtener el token\nimport { useSelector } from 'react-redux';\n\n// Configura una instancia de Axios con interceptores\nconst api = axios.create({\n  baseURL: Orders,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para agregar el token a las solicitudes\n_s(api.interceptors.request.use(_s(config => {\n  _s();\n  // Obtén el token de Redux store\n  const token = useSelector(selectToken); // Usa el hook useSelector en el componente donde se necesite\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, \"bD5+gKbiITcJRDYAIJK4ZSEgato=\", false, function () {\n  return [useSelector];\n}), error => {\n  return Promise.reject(error);\n}), \"bD5+gKbiITcJRDYAIJK4ZSEgato=\", false, function () {\n  return [useSelector];\n});\nexport const ordersSlice = createSlice({\n  name: 'orders',\n  initialState: {\n    list: [],\n    status: 'idle'\n  },\n  reducers: {\n    setOrders: (state, action) => {\n      state.list = action.payload;\n    },\n    addOrder: (state, action) => {\n      state.list.push(action.payload);\n    },\n    updateOrder: (state, action) => {\n      const index = state.list.findIndex(order => order.id === action.payload.id);\n      if (index >= 0) {\n        state.list[index] = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  setOrders,\n  addOrder,\n  updateOrder\n} = ordersSlice.actions;\nexport const fetchOrders = () => async dispatch => {\n  try {\n    const response = await api.get('/'); // Asume que '/orders' es la ruta\n    dispatch(setOrders(response.data));\n  } catch (err) {\n    console.error(\"Error fetching orders:\", err);\n  }\n};\nexport const confirmOrder = orderId => async dispatch => {\n  try {\n    const response = await api.patch(`/orders/${orderId}/confirm`);\n    dispatch(updateOrder(response.data));\n  } catch (err) {\n    console.error(\"Error confirming order:\", err);\n  }\n};\nexport const cancelOrder = orderId => async dispatch => {\n  try {\n    const response = await api.patch(`/orders/${orderId}/cancel`);\n    dispatch(updateOrder(response.data));\n  } catch (err) {\n    console.error(\"Error canceling order:\", err);\n  }\n};\nexport default ordersSlice.reducer;","map":{"version":3,"names":["createSlice","axios","Orders","selectToken","useSelector","api","create","baseURL","headers","_s","interceptors","request","use","config","token","error","Promise","reject","ordersSlice","name","initialState","list","status","reducers","setOrders","state","action","payload","addOrder","push","updateOrder","index","findIndex","order","id","actions","fetchOrders","dispatch","response","get","data","err","console","confirmOrder","orderId","patch","cancelOrder","reducer"],"sources":["A:/Code repositorio/Java/Patito/front-end/patito-frontend/src/features/orders/ordersSlice.js"],"sourcesContent":["// src/features/orders/ordersSlice.js\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { Orders } from \"../../cons/urls\";\r\nimport { selectToken } from '../auth/authSlice'; // Selector para obtener el token\r\nimport { useSelector } from 'react-redux';\r\n\r\n// Configura una instancia de Axios con interceptores\r\nconst api = axios.create({\r\n  baseURL: Orders,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor para agregar el token a las solicitudes\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Obtén el token de Redux store\r\n    const token = useSelector(selectToken); // Usa el hook useSelector en el componente donde se necesite\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const ordersSlice = createSlice({\r\n  name: 'orders',\r\n  initialState: {\r\n    list: [],\r\n    status: 'idle',\r\n  },\r\n  reducers: {\r\n    setOrders: (state, action) => {\r\n      state.list = action.payload;\r\n    },\r\n    addOrder: (state, action) => {\r\n      state.list.push(action.payload);\r\n    },\r\n    updateOrder: (state, action) => {\r\n      const index = state.list.findIndex(order => order.id === action.payload.id);\r\n      if (index >= 0) {\r\n        state.list[index] = action.payload;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setOrders, addOrder, updateOrder } = ordersSlice.actions;\r\n\r\nexport const fetchOrders = () => async (dispatch) => {\r\n  try {\r\n    const response = await api.get('/'); // Asume que '/orders' es la ruta\r\n    dispatch(setOrders(response.data));\r\n  } catch (err) {\r\n    console.error(\"Error fetching orders:\", err);\r\n  }\r\n};\r\n\r\nexport const confirmOrder = (orderId) => async (dispatch) => {\r\n  try {\r\n    const response = await api.patch(`/orders/${orderId}/confirm`);\r\n    dispatch(updateOrder(response.data));\r\n  } catch (err) {\r\n    console.error(\"Error confirming order:\", err);\r\n  }\r\n};\r\n\r\nexport const cancelOrder = (orderId) => async (dispatch) => {\r\n  try {\r\n    const response = await api.patch(`/orders/${orderId}/cancel`);\r\n    dispatch(updateOrder(response.data));\r\n  } catch (err) {\r\n    console.error(\"Error canceling order:\", err);\r\n  }\r\n};\r\n\r\nexport default ordersSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}